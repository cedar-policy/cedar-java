/*
 Applies core Gradle plugins, which are ones built into Gradle itself.
*/
plugins {
    // Java for compile and unit test of Java source files. Read more at:
    // https://docs.gradle.org/current/userguide/java_plugin.html
    id 'java'

    // JaCoCo for coverage metrics and reports of Java source files. Read more at:
    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'

    id 'checkstyle'
}

/*
 Applies community Gradle plugins, usually added as build-tools in Config.
*/

// SpotBugs for quality checks and reports of source files. Read more at:
// https://spotbugs.readthedocs.io/en/stable/gradle.html
apply plugin: 'com.github.spotbugs'

apply plugin: 'google-java-format-plugin'

/*
 Java plugin default project layout is 'src/main/java' and 'src/test/java'.
 Uncomment below if you instead want to use 'src' and 'tst'.

sourceSets.main.java.srcDirs = ['src']
sourceSets.test.java.srcDirs = ['tst']
*/

check.dependsOn verify
formatter {
    formatterStyle = "AOSP"
    includeTests = true
}

/*
 Configures the JaCoCo "jacoco" plugin. Remove this if you want to skip
 these checks and report generation.

 Set minimum code coverage to fail build, where 0.01 = 1%.
*/
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.35
            }
        }
    }
}

/*
 Configures the SpotBugs "com.github.spotbugs" plugin. Remove this and the
 plugin to skip these checks and report generation.
*/
spotbugs {
    ignoreFailures.set(false)
}
/*
  The SpotBugs Gradle Plugin generates a task for each sourceSet generated by
  Gradle Java Plugin. For instance, if you have two sourceSets main and test,
  this plugin will generates two tasks: spotbugsMain and spotbugsTest.
  Uncomment below if you want to skip checks for test code.

spotbugsTest {
  ignoreFailures = true
}
*/

/*
 Build, test, tool, and runtime dependencies.
*/
dependencies {
    runtimeOnly 
    implementation 
    testImplementation 
}

/*
 Specifies that JUnit Platform (a.k.a. JUnit 5) should be used to execute tests.

 For mixed JUnit 4 and 5 tests, add 'JUnit-4-12-migration = 5.x;' to
 test-dependencies in Config.
*/
test {
    useJUnitPlatform()
    systemProperty 'java.library.path', Gradle.path('testrun.lib')
    environment "CEDAR_INTEGRATION_TESTS_ROOT", Gradle.path('[CedarIntegrationTests]pkg.src')
    testLogging {
        exceptionFormat = 'full'
        showStackTraces = true
        showStandardStreams = true
    }
}
